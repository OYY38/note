import{_ as n,p as s,q as a,a1 as e}from"./framework-5866ffd3.js";const p={},t=e(`<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> javascript</h1><h2 id="_1-说说-javascript-中的数据类型" tabindex="-1"><a class="header-anchor" href="#_1-说说-javascript-中的数据类型" aria-hidden="true">#</a> 1. 说说 JavaScript 中的数据类型？</h2><ul><li>基本数据类型: Undefined, Null, Boolean, Number, String, Symbol, BigInt</li><li>引用数据类型: Object, Array, Function, Date, RegExp 等</li></ul><p>存储区别</p><ul><li>基本数据类型: 存储在栈内存中, 通过值访问</li><li>引用数据类型: 存储在堆内存中, 通过引用访问</li></ul><h2 id="_2-数组的常用方法" tabindex="-1"><a class="header-anchor" href="#_2-数组的常用方法" aria-hidden="true">#</a> 2. 数组的常用方法</h2><ul><li>增: push, unshift, splice, concat</li><li>删: pop, shift, splice, slice</li><li>查: indexOf, includes, find</li><li>排序: sort, reverse</li><li>转换: join</li><li>迭代: forEach, map, filter, reduce, some, every</li></ul><h2 id="_3-字符串的常用方法" tabindex="-1"><a class="header-anchor" href="#_3-字符串的常用方法" aria-hidden="true">#</a> 3. 字符串的常用方法</h2><ul><li>增: concat, slice, substring, substr</li><li>改: trim, toUpperCase, toLowerCase</li><li>查: indexOf, includes, startsWith, endsWith</li><li>转换: split</li><li>正则: match, replace</li></ul><h2 id="_4-谈谈-javascript-中的类型转换" tabindex="-1"><a class="header-anchor" href="#_4-谈谈-javascript-中的类型转换" aria-hidden="true">#</a> 4. 谈谈 JavaScript 中的类型转换</h2><ul><li>显示类型转换: Number, String, Boolean, ParseInt</li><li>隐式类型转换: ==, +, -, *, /, %, &lt;, &gt;, &lt;=, &gt;=, &amp;&amp;, ||, !, if, for, while 等</li></ul><p>自动转换为布尔值</p><ul><li>假值: false, 0, -0, &#39;&#39;, null, undefined, NaN</li><li>真值: 除了假值的都是真值</li></ul><p>自动转换为字符串</p><ul><li>复合类型: 先转为基本类型, 再转为字符串</li><li>原始类型: 直接转为字符串</li></ul><p>自动转换为数值</p><ul><li>复合类型: 先转为基本类型, 再转为数值</li><li>原始类型: 直接转为数值</li></ul><h2 id="_5-和-的区别-分别在什么情况下使用" tabindex="-1"><a class="header-anchor" href="#_5-和-的区别-分别在什么情况下使用" aria-hidden="true">#</a> 5. == 和 === 的区别, 分别在什么情况下使用?</h2><ul><li>==: 相等, 会自动转换类型</li><li>===: 严格相等, 不会自动转换类型</li></ul><p>使用场景</p><ul><li>==: 用于判断两个值是否相等</li><li>===: 用于判断两个值是否严格相等</li></ul><h2 id="_6-深拷贝和浅拷贝的区别-如何实现一个深拷贝" tabindex="-1"><a class="header-anchor" href="#_6-深拷贝和浅拷贝的区别-如何实现一个深拷贝" aria-hidden="true">#</a> 6. 深拷贝和浅拷贝的区别? 如何实现一个深拷贝?</h2><ul><li>浅拷贝: 浅拷贝是拷贝一层, 属性为对象时, 浅拷贝是复制, 两个对象指向同一个地址</li><li>深拷贝: 深拷贝是递归拷贝深层次, 属性为对象时, 深拷贝是新开栈, 两个对象指向不同的地址</li></ul><p>浅拷贝</p><ul><li>Object.assign(target, ...sources): 只能拷贝一层, 不能处理函数, undefined, Symbol, 循环引用等</li><li>扩展运算符: 只能拷贝一层, 不能处理函数, undefined, Symbol, 循环引用等</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
实现深拷贝

<span class="token operator">-</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> 不能处理函数<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> 循环引用等
<span class="token operator">-</span> 递归<span class="token operator">:</span> 可以处理函数<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> Symbol<span class="token punctuation">,</span> 循环引用等

<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>\`js
<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
  <span class="token keyword">const</span> cloneObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cloneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> cloneObj
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-说说你对闭包的理解-闭包的作用是什么" tabindex="-1"><a class="header-anchor" href="#_7-说说你对闭包的理解-闭包的作用是什么" aria-hidden="true">#</a> 7. 说说你对闭包的理解, 闭包的作用是什么?</h2><ul><li>闭包: 简单理解就是函数套函数, 内部函数可以访问外部函数的变量</li></ul><p>作用</p><ul><li>创建私有变量</li><li>延长变量的声明周期</li></ul><h2 id="_8-说说你对作用域链的理解" tabindex="-1"><a class="header-anchor" href="#_8-说说你对作用域链的理解" aria-hidden="true">#</a> 8. 说说你对作用域链的理解</h2><p>作用域, 即变量(变量作用域又称上下文)和函数生效(能被访问)的区域或集合</p><ul><li>全局作用域: 全局变量和函数都在全局作用域中生效</li><li>函数作用域: 函数内部声明的变量和函数只在函数内部生效</li><li>块级作用域: 块级作用域内声明的变量和函数只在块级作用域内生效</li></ul><h2 id="_9-javascript-原型-原型链-有什么特点" tabindex="-1"><a class="header-anchor" href="#_9-javascript-原型-原型链-有什么特点" aria-hidden="true">#</a> 9. JavaScript 原型, 原型链? 有什么特点?</h2><ul><li>原型: 每个函数都有一个 <code>prototype</code> 属性, 指向一个对象, 这个对象就是原型</li><li>原型链: 原型对象也可能拥有原型, 并从中继承方法和属性, 一层一层、以此类推. 这种关系常被称为原型链(prototype chain)</li><li>一切对象都是继承自 <code>Object</code> 对象, <code>Object</code> 对象直接继承根源对象 <code>null</code></li><li>一切的函数对象(包括 <code>Object</code> 对象), 都是继承自 <code>Function</code> 对象</li><li><code>Object</code> 对象直接继承自 <code>Function</code> 对象</li><li><code>Function</code> 对象的 <code>__proto__</code> 会指向自己的原型对象, 最终还是继承自Object对象</li></ul><h2 id="_10-javascript-如何实现继承" tabindex="-1"><a class="header-anchor" href="#_10-javascript-如何实现继承" aria-hidden="true">#</a> 10. Javascript 如何实现继承？</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Person:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">&#39;Asuna&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-谈谈-this-对象的理解" tabindex="-1"><a class="header-anchor" href="#_11-谈谈-this-对象的理解" aria-hidden="true">#</a> 11. 谈谈 this 对象的理解</h2><ul><li>普通函数中的 this: window, 严格模式下是 undefined</li><li>对象方法中的 this: 对象本身, <code>this</code> 永远指向的是最后调用它的对象</li><li>构造函数中的 this: 实例对象</li><li>箭头函数中的 this: 箭头函数没有自己的 this, 它的 this 继承自上一层的上下文</li></ul><h2 id="_12-说说-javascript-中的事件模型" tabindex="-1"><a class="header-anchor" href="#_12-说说-javascript-中的事件模型" aria-hidden="true">#</a> 12. 说说 JavaScript 中的事件模型</h2><p><strong>事件与事件流</strong></p><p>由于DOM是一个树结构, 如果在父子节点绑定事件时候, 当触发子节点的时候, 就存在一个顺序问题, 这就涉及到了事件流的概念</p><p>事件流都会经历三个阶段:</p><ul><li>事件捕获阶段</li><li>处于目标阶段</li><li>事件冒泡阶段</li></ul><p><strong>事件模型</strong></p><p>事件模型可以分为三种:</p><ul><li>原始事件模型</li><li>标准事件模型</li><li>IE事件模型(基本不用)</li></ul><p><strong>原始事件模型</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;.btn&#39;</span><span class="token punctuation">)</span>
btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> fun

<span class="token comment">// 删除</span>
btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特性</strong></p><ul><li>只支持冒泡, 不支持捕获</li><li>同一个类型的事件只能绑定一次</li></ul><p><strong>标准事件模型</strong></p><p>在该事件模型中, 一次事件共有三个过程:</p><ul><li>事件捕获阶段</li><li>事件处理阶段</li><li>事件冒泡阶段</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> useCapture<span class="token punctuation">)</span>

<span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> useCapture<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特性</strong></p><ul><li>支持冒泡和捕获</li><li>同一个类型的事件可以绑定多次</li></ul><h2 id="_13-typeof-与-instanceof-的区别" tabindex="-1"><a class="header-anchor" href="#_13-typeof-与-instanceof-的区别" aria-hidden="true">#</a> 13. typeof 与 instanceof 的区别</h2><ul><li>typeof: 用于判断基本数据类型, 不能判断引用数据类型, 除了函数</li><li>instanceof: 用于判断引用数据类型, 不能判断基本数据类型</li></ul><p>如果需要通用检测数据类型, 可以采用 <code>Object.prototype.toString</code>, 调用该方法, 统一返回格式 &quot;[object Xxx]&quot; 的字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token comment">// &quot;[object Object]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// &quot;[object Number]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-解析下什么是事件代理-应用场景" tabindex="-1"><a class="header-anchor" href="#_14-解析下什么是事件代理-应用场景" aria-hidden="true">#</a> 14. 解析下什么是事件代理？应用场景?</h2><p>事件代理又称事件委托, 是指将事件绑定到目标元素的父元素上, 通过事件冒泡机制, 触发执行效果</p><p><strong>优点</strong></p><ul><li>减少内存消耗, 减少事件注册, 提高性能</li><li>动态绑定事件</li></ul><h2 id="_15-说说-new-操作符具体干了什么呢" tabindex="-1"><a class="header-anchor" href="#_15-说说-new-操作符具体干了什么呢" aria-hidden="true">#</a> 15. 说说 new 操作符具体干了什么呢?</h2><ul><li>创建一个空对象, 作为将要返回的对象实例</li><li>将这个空对象的原型, 指向构造函数的 <code>prototype</code> 属性</li><li>将构造函数的 <code>this</code> 指向该对象</li><li>执行构造函数</li><li>返回该对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mynew</span><span class="token punctuation">(</span><span class="token parameter">Func<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.创建一个新对象</span>
    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// 2.新对象原型指向构造函数原型对象</span>
    obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Func</span><span class="token punctuation">.</span>prototype
    <span class="token comment">// 3.将构造函数的 this 指向新对象</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">Func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
    <span class="token comment">// 4.根据返回值判断</span>
    <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-ajax-原理是什么-如何实现" tabindex="-1"><a class="header-anchor" href="#_16-ajax-原理是什么-如何实现" aria-hidden="true">#</a> 16. ajax 原理是什么? 如何实现?</h2><p>ajax: Asynchronous JavaScript and XML, 异步的 JavaScript 和 XML, 是一种在无需重新加载整个网页的情况下, 能够更新部分网页的技术</p><p><strong>实现过程</strong></p><ul><li>创建 <code>Ajax</code> 的核心对象 <code>XMLHttpRequest</code> 对象</li><li>通过 <code>XMLHttpRequest</code> 对象的 <code>open()</code> 方法与服务端建立连接</li><li>构建请求所需的数据内容, 并通过 <code>XMLHttpRequest</code> 对象的 <code>send()</code> 方法发送给服务器端</li><li>通过 <code>XMLHttpRequest</code> 对象提供的 <code>onreadystatechange</code> 事件监听服务器端你的通信状态</li><li>接受并处理服务端向客户端响应的数据结果</li><li>将处理结果更新到 <code>HTML</code> 页面中</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> fail</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">fail</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_17-bind、call、apply-的区别" tabindex="-1"><a class="header-anchor" href="#_17-bind、call、apply-的区别" aria-hidden="true">#</a> 17. bind、call、apply 的区别?</h2><p><code>call</code>、<code>apply</code>、<code>bind</code> 作用是改变函数执行时的上下文, 简而言之就是改变函数运行时的 <code>this</code> 指向</p><p><strong>apply</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">myname</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 第一个参数是 this, 第二个参数是数组, 会立即执行</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// this 会变成传入的 obj, 传入的参数必须是一个数组</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// this 指向 window</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>call</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">myname</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 第一个参数是 this, 第二个参数是参数列表, 会立即执行</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// this 会变成传入的 obj</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// this 指向 window</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>bind</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">myname</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 第一个参数是 this, 第二个参数是参数列表，可以分多次传入, 不会立即执行</span>
<span class="token keyword">const</span> bindFn <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token function">bindFn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// this 指向 obj</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// this 指向 window</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_18-说说你对事件循环的理解" tabindex="-1"><a class="header-anchor" href="#_18-说说你对事件循环的理解" aria-hidden="true">#</a> 18. 说说你对事件循环的理解</h2><p>事件循环是指浏览器或 Node 的一种解决 javaScript 单线程运行时不会阻塞的一种机制</p><p><strong>同步任务</strong></p><p>同步任务会在主线程上排队执行, 只有前一个任务执行完毕, 才能执行后一个任务</p><p><strong>异步任务</strong></p><p>异步任务进入任务队列, 主线程内的任务执行完毕为空, 会去任务队列读取对应的任务, 推入主线程执行</p><p><strong>任务队列</strong></p><p>任务队列是一个先进先出的数据结构, 主线程会不断从任务队列中读取任务, 并将任务放入主线程中执行</p><p>异步任务又分为宏任务和微任务</p><p><strong>宏任务</strong></p><ul><li>script(可以理解为外层同步代码)</li><li>setTimeout/setInterval</li><li>postMessage</li></ul><p><strong>微任务</strong></p><ul><li>Promise.then</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// script start</span>
<span class="token comment">// script end</span>
<span class="token comment">// promise1</span>
<span class="token comment">// promise2</span>
<span class="token comment">// setTimeout</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_19-举例说明你对尾递归的理解-并说说它的优缺点" tabindex="-1"><a class="header-anchor" href="#_19-举例说明你对尾递归的理解-并说说它的优缺点" aria-hidden="true">#</a> 19. 举例说明你对尾递归的理解, 并说说它的优缺点</h2><p>尾递归是指函数的最后一步是调用自身, 且是函数的最后一步</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> total <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> total
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> total<span class="token punctuation">,</span> total <span class="token operator">+</span> start<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优点</strong></p><p>减少内存消耗, 减少函数调用栈的次数, 避免栈溢出(O(1)), 否则容易造成栈溢出(O(n))</p><h2 id="_20-javascript-本地存储的方式有哪些-有什么区别" tabindex="-1"><a class="header-anchor" href="#_20-javascript-本地存储的方式有哪些-有什么区别" aria-hidden="true">#</a> 20. JavaScript 本地存储的方式有哪些? 有什么区别?</h2><p><strong>cookie</strong></p><p><code>Cookie</code> 指某些网站为了辨别用户身份而储存在用户本地终端上的数据. 是为了解决 HTTP 无状态导致的问题</p><ul><li>会自动携带在 HTTP 请求头中</li><li>有大小限制, 一般为 4K</li><li>可以设置过期时间</li><li>可以通过设置 <code>httponly</code> 防止 XSS 攻击</li></ul><p><strong>localStorage</strong></p><p><code>HTML5</code> 新方法, IE8 及以上浏览器都兼容</p><ul><li>持久化的本地存储, 除非主动删除数据, 否则数据永远不会过期</li><li>一般为 5M</li><li>只能存储字符串类型, 可以通过 <code>JSON.stringify</code> 和 <code>JSON.parse</code> 转换</li><li>受同源策略的限制</li></ul><h2 id="_21-说说-javascript-数字精度丢失的原因-以及解决方案" tabindex="-1"><a class="header-anchor" href="#_21-说说-javascript-数字精度丢失的原因-以及解决方案" aria-hidden="true">#</a> 21. 说说 JavaScript 数字精度丢失的原因, 以及解决方案</h2><p><strong>原因</strong></p><p><code>JavaScript</code> 存储方式是双精度浮点数, 64 位存储一个浮点数, 1 位符号位, 11 位指数位, 52 位小数位. 某些数无法用二进制精确表示, 会造成精度丢失</p><p><strong>解决方案</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> num1Digits <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length
  <span class="token keyword">const</span> num2Digits <span class="token operator">=</span> <span class="token punctuation">(</span>num2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length
  <span class="token keyword">const</span> baseNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>num1Digits<span class="token punctuation">,</span> num2Digits<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>num1 <span class="token operator">*</span> baseNum <span class="token operator">+</span> num2 <span class="token operator">*</span> baseNum<span class="token punctuation">)</span> <span class="token operator">/</span> baseNum
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_22-什么是防抖和节流-如何实现-应用场景有哪些" tabindex="-1"><a class="header-anchor" href="#_22-什么是防抖和节流-如何实现-应用场景有哪些" aria-hidden="true">#</a> 22. 什么是防抖和节流? 如何实现? 应用场景有哪些?</h2><p><strong>防抖</strong></p><p>防抖是指在事件被触发 n 秒后再执行回调, 如果在 n 秒内又被触发, 则重新计时</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>节流</strong></p><p>节流是指连续触发事件但是在 n 秒中只执行一次回调函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
      timer <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>应用场景</strong></p><ul><li>防抖: 搜索框搜索输入, 只需用户最后一次输入完, 再发送请求</li><li>节流: 滚动加载，加载更多或滚到底部监听</li></ul><h2 id="_23-说说-var、let、const-之间的区别" tabindex="-1"><a class="header-anchor" href="#_23-说说-var、let、const-之间的区别" aria-hidden="true">#</a> 23. 说说 var、let、const 之间的区别</h2><p><strong>var</strong></p><ul><li>在 <code>ES5</code> 中, 顶层对象的属性和全局变量是等价的</li><li>可以重复声明, 会覆盖之前的值</li><li>不存在块级作用域, 只有函数作用域</li><li>会变量提升, 可以先使用后声明</li></ul><p><strong>let</strong></p><ul><li>声明的变量只在块级作用域内有效</li><li>不存在变量提升, 必须先声明后使用</li><li>不允许重复声明</li></ul><p><strong>const</strong></p><ul><li>声明的变量只在块级作用域内有效</li><li>不存在变量提升, 必须先声明后使用</li><li>不允许重复声明</li><li>声明的变量必须赋值, 且不能修改</li></ul><h2 id="_24-es6-中数组新增了哪些扩展" tabindex="-1"><a class="header-anchor" href="#_24-es6-中数组新增了哪些扩展" aria-hidden="true">#</a> 24. ES6 中数组新增了哪些扩展?</h2><p><strong>扩展运算符</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span>

<span class="token comment">// 定义了遍历器(Iterator)接口的对象, 都可以用扩展运算符转为真正的数组</span>
<span class="token keyword">const</span> nodeList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>nodeList<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Array.from</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将类数组对象和可遍历对象转为真正的数组</span>
<span class="token keyword">const</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>
  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span>
  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数组解构</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> third<span class="token punctuation">]</span> <span class="token operator">=</span> arr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_25-es6-中对象新增了哪些扩展" tabindex="-1"><a class="header-anchor" href="#_25-es6-中对象新增了哪些扩展" aria-hidden="true">#</a> 25. ES6 中对象新增了哪些扩展?</h2><p><strong>属性简写</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span>
<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">18</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">,</span>
  age<span class="token punctuation">,</span>
  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>属性名表达式</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> lastWord <span class="token operator">=</span> <span class="token string">&#39;last word&#39;</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;first word&#39;</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>lastWord<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;world&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>扩展运算符</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1<span class="token punctuation">,</span> <span class="token operator">...</span>obj2 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Object.assign</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>对象解构</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span> <span class="token operator">=</span> obj
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_26-es6-中函数新增了哪些扩展" tabindex="-1"><a class="header-anchor" href="#_26-es6-中函数新增了哪些扩展" aria-hidden="true">#</a> 26. ES6 中函数新增了哪些扩展?</h2><p><strong>参数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 参数默认值</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 不定参数</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>箭头函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 箭头函数没有自己的 this, 它的 this 是继承外层的 this</span>
<span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_27-你是怎么理解-es6-中-promise-的-它解决了什么问题" tabindex="-1"><a class="header-anchor" href="#_27-你是怎么理解-es6-中-promise-的-它解决了什么问题" aria-hidden="true">#</a> 27. 你是怎么理解 ES6 中 Promise 的? 它解决了什么问题?</h2><p><code>Promise</code> 是异步编程的一种解决方案, 比传统的解决方案 <code>回调函数</code> 更合理和更强大</p><p><strong>状态</strong></p><ul><li><code>pending</code>: 进行中</li><li><code>fulfilled</code>: 已成功</li><li><code>rejected</code>: 已失败</li></ul><p><strong>用法</strong></p><p><code>Promise</code> 对象是一个构造函数, 用来生成 <code>Promise</code> 实例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;成功&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// then 方法接收两个参数, 第一个参数是 \`resolve\` 的回调, 第二个参数是 \`reject\` 的回调</span>
<span class="token comment">// catch 方法用于指定发生错误时的回调</span>
<span class="token comment">// finally 方法用于指定不管 Promise 对象最后状态如何, 都会执行的操作 </span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;finally&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Promise</code> 构造函数接受一个函数作为参数, 该函数的两个参数分别是 <code>resolve</code> 和 <code>reject</code></p><ul><li><code>resolve</code> 函数的作用是将 <code>Promise</code> 对象的状态从 <code>pending</code> 变为 <code>fulfilled</code></li><li><code>reject</code> 函数的作用是将 <code>Promise</code> 对象的状态从 <code>pending</code> 变为 <code>rejected</code></li></ul><p><strong>构造函数方法</strong></p><ul><li><code>Promise.allSettled</code>: 将多个 <code>Promise</code> 实例包装成一个新的 <code>Promise</code> 实例, 所有 <code>Promise</code> 实例都 <code>resolve</code> 或 <code>reject</code> 才会 <code>resolve</code>, 不管成功或失败, 都会返回结果</li><li><code>Promise.resolve</code>: 将现有对象转为 <code>Promise</code> 对象</li><li><code>Promise.reject</code>: 返回一个新的 <code>Promise</code> 实例, 该实例的状态为 <code>rejected</code></li></ul><h2 id="_28-你是怎么理解-es6-中-generator-的" tabindex="-1"><a class="header-anchor" href="#_28-你是怎么理解-es6-中-generator-的" aria-hidden="true">#</a> 28. 你是怎么理解 ES6 中 Generator 的?</h2><p><strong>Generator函数</strong></p><p>执行 <code>Generator</code> 函数会返回一个遍历器对象(即具有 <code>Symbol.iterator</code> 属性), 可以依次遍历 <code>Generator</code> 函数内部的每一个状态</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">helloWorldGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">yield</span> <span class="token string">&#39;hello&#39;</span>
  <span class="token keyword">yield</span> <span class="token string">&#39;world&#39;</span>
  <span class="token keyword">return</span> <span class="token string">&#39;ending&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> hw <span class="token operator">=</span> <span class="token function">helloWorldGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

hw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// { value: &#39;hello&#39;, done: false }</span>

hw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// { value: &#39;world&#39;, done: false }</span>

hw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// { value: &#39;ending&#39;, done: true }</span>

hw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// { value: undefined, done: true }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_29-你是怎么理解-es6-中-async-await-的" tabindex="-1"><a class="header-anchor" href="#_29-你是怎么理解-es6-中-async-await-的" aria-hidden="true">#</a> 29. 你是怎么理解 ES6 中 async/await 的?</h2><p><code>async</code> 函数是 <code>Generator</code> 函数的语法糖, 相当于会自动执行 <code>Generator</code> 函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// await 后面跟着一个 Promise 对象, 如果不是, 会被转成一个立即 \`resolve\` 的 Promise 对象</span>
  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;成功&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_30-你是怎么理解-es6-中-module-的-使用场景" tabindex="-1"><a class="header-anchor" href="#_30-你是怎么理解-es6-中-module-的-使用场景" aria-hidden="true">#</a> 30. 你是怎么理解 <code>ES6</code> 中 <code>Module</code> 的？使用场景？</h2><p><strong>CommonJs</strong></p><p>特点:</p><ul><li>所有代码都运行在模块作用域,不会污染全局作用域</li><li>模块是同步加载的,即只有加载完成,才能执行后面的操作</li><li>模块在首次执行后就会缓存,再次加载只返回缓存结果,如果想要再次执行,可清除缓存</li><li>输出的是值的拷贝</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导出</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token comment">// 导入</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./a&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 导出</span>
exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// exports 是 module.exports 的引用</span>
<span class="token comment">// 导入</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./a&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ES6 Module</strong></p><p>特点:</p><ul><li>ES6 模块的设计思想是尽量的静态化, 使得编译时就能确定模块的依赖关系, 以及输入和输出的变量</li><li>ES6 模块是异步加载模块</li><li>ES6 模块输出的是值的引用, 不是值的拷贝</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导出</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token comment">// 导入</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span>
<span class="token comment">// 导入全部</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> obj <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span>

<span class="token comment">// 导出</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> a
<span class="token comment">// 导入</span>
<span class="token keyword">import</span> a <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span>

<span class="token comment">// 导出</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token comment">// 导入</span>
<span class="token keyword">import</span> obj <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>export 与 import 的复合写法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span>
<span class="token comment">// 整体输出</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">as</span> obj <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span>

<span class="token comment">// 默认导出</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span>
<span class="token comment">// 默认接口改为具名接口</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> a <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span>
<span class="token comment">// 具名接口改为默认接口</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> a <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_31-如何实现跨域" tabindex="-1"><a class="header-anchor" href="#_31-如何实现跨域" aria-hidden="true">#</a> 31. 如何实现跨域？</h2><p>跨域：浏览器的同源策略，限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互</p><p><strong>解决方案</strong></p><ul><li>CORS</li><li>postMessage</li><li>反向代理</li></ul><h2 id="_32-xss-攻击是什么-如何防范" tabindex="-1"><a class="header-anchor" href="#_32-xss-攻击是什么-如何防范" aria-hidden="true">#</a> 32. XSS 攻击是什么？如何防范？</h2><p>XSS 攻击：XSS 是跨站脚本攻击(Cross Site Scripting)的简称, 是一种代码注入攻击, 攻击者通过在目标网站上注入恶意脚本, 使之在用户的浏览器上运行, 从而获取用户的敏感信息</p><p><strong>防范</strong></p><ul><li>对用户输入的数据进行转义</li></ul><h2 id="_33-迭代器是什么-如何使用迭代器" tabindex="-1"><a class="header-anchor" href="#_33-迭代器是什么-如何使用迭代器" aria-hidden="true">#</a> 33. 迭代器是什么？如何使用迭代器？</h2><p>迭代器是一种特殊对象, 每一个迭代器对象都有一个 <code>next</code> 方法, 每次调用 <code>next</code> 方法都会返回一个结果对象, 该结果对象有两个属性, <code>value</code> 表示当前的值, <code>done</code> 表示是否迭代完成</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> iterator <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: 1, done: false }</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: 2, done: false }</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: 3, done: false }</span>
iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>

<span class="token comment">// 自定义迭代器</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">value</span><span class="token operator">:</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
            <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,192),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","js.html.vue"]]);export{r as default};
